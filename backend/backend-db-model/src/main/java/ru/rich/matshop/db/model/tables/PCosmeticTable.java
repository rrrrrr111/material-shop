/*
 * This file is generated by jOOQ.
 */
package ru.rich.matshop.db.model.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.rich.matshop.db.model.Indexes;
import ru.rich.matshop.db.model.Keys;
import ru.rich.matshop.db.model.Matshop;
import ru.rich.matshop.db.model.tables.records.PCosmeticRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PCosmeticTable extends TableImpl<PCosmeticRecord> {

    private static final long serialVersionUID = 1055504965;

    /**
     * The reference instance of <code>matshop.p_cosmetic</code>
     */
    public static final PCosmeticTable P_COSMETIC = new PCosmeticTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PCosmeticRecord> getRecordType() {
        return PCosmeticRecord.class;
    }

    /**
     * The column <code>matshop.p_cosmetic.product_id</code>.
     */
    public final TableField<PCosmeticRecord, Long> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>matshop.p_cosmetic.price</code>.
     */
    public final TableField<PCosmeticRecord, Long> PRICE = createField("price", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>matshop.p_cosmetic.discount</code>.
     */
    public final TableField<PCosmeticRecord, String> DISCOUNT = createField("discount", org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>matshop.p_cosmetic.popularity</code>.
     */
    public final TableField<PCosmeticRecord, Long> POPULARITY = createField("popularity", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>matshop.p_cosmetic.brand</code>.
     */
    public final TableField<PCosmeticRecord, String> BRAND = createField("brand", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * Create a <code>matshop.p_cosmetic</code> table reference
     */
    public PCosmeticTable() {
        this(DSL.name("p_cosmetic"), null);
    }

    /**
     * Create an aliased <code>matshop.p_cosmetic</code> table reference
     */
    public PCosmeticTable(String alias) {
        this(DSL.name(alias), P_COSMETIC);
    }

    /**
     * Create an aliased <code>matshop.p_cosmetic</code> table reference
     */
    public PCosmeticTable(Name alias) {
        this(alias, P_COSMETIC);
    }

    private PCosmeticTable(Name alias, Table<PCosmeticRecord> aliased) {
        this(alias, aliased, null);
    }

    private PCosmeticTable(Name alias, Table<PCosmeticRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PCosmeticTable(Table<O> child, ForeignKey<O, PCosmeticRecord> key) {
        super(child, key, P_COSMETIC);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Matshop.MATSHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_PCS_CATEGORY, Indexes.IDX_PCS_NAME, Indexes.IDX_PCS_POPULARITY, Indexes.IDX_PCS_PRICE, Indexes.P_COSMETIC_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PCosmeticRecord> getPrimaryKey() {
        return Keys.P_COSMETIC_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PCosmeticRecord>> getKeys() {
        return Arrays.<UniqueKey<PCosmeticRecord>>asList(Keys.P_COSMETIC_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PCosmeticRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PCosmeticRecord, ?>>asList(Keys.P_COSMETIC__P_COSMETIC_PRODUCT_ID_FKEY);
    }

    public ProductTable product() {
        return new ProductTable(this, Keys.P_COSMETIC__P_COSMETIC_PRODUCT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PCosmeticTable as(String alias) {
        return new PCosmeticTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PCosmeticTable as(Name alias) {
        return new PCosmeticTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PCosmeticTable rename(String name) {
        return new PCosmeticTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PCosmeticTable rename(Name name) {
        return new PCosmeticTable(name, null);
    }
}
