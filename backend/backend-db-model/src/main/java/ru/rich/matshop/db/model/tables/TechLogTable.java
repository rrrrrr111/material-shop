/*
 * This file is generated by jOOQ.
 */
package ru.rich.matshop.db.model.tables;


import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.rich.matshop.db.converters.TimestampConverter;
import ru.rich.matshop.db.model.Indexes;
import ru.rich.matshop.db.model.Keys;
import ru.rich.matshop.db.model.Matshop;
import ru.rich.matshop.db.model.tables.records.TechLogRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TechLogTable extends TableImpl<TechLogRecord> {

    private static final long serialVersionUID = 1119078708;

    /**
     * The reference instance of <code>matshop.tech_log</code>
     */
    public static final TechLogTable TECH_LOG = new TechLogTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TechLogRecord> getRecordType() {
        return TechLogRecord.class;
    }

    /**
     * The column <code>matshop.tech_log.id</code>.
     */
    public final TableField<TechLogRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('tech_log_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>matshop.tech_log.type</code>.
     */
    public final TableField<TechLogRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>matshop.tech_log.object_id</code>.
     */
    public final TableField<TechLogRecord, Long> OBJECT_ID = createField("object_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>matshop.tech_log.data</code>.
     */
    public final TableField<TechLogRecord, String> DATA = createField("data", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>matshop.tech_log.event_date</code>.
     */
    public final TableField<TechLogRecord, Date> EVENT_DATE = createField("event_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new TimestampConverter());

    /**
     * Create a <code>matshop.tech_log</code> table reference
     */
    public TechLogTable() {
        this(DSL.name("tech_log"), null);
    }

    /**
     * Create an aliased <code>matshop.tech_log</code> table reference
     */
    public TechLogTable(String alias) {
        this(DSL.name(alias), TECH_LOG);
    }

    /**
     * Create an aliased <code>matshop.tech_log</code> table reference
     */
    public TechLogTable(Name alias) {
        this(alias, TECH_LOG);
    }

    private TechLogTable(Name alias, Table<TechLogRecord> aliased) {
        this(alias, aliased, null);
    }

    private TechLogTable(Name alias, Table<TechLogRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TechLogTable(Table<O> child, ForeignKey<O, TechLogRecord> key) {
        super(child, key, TECH_LOG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Matshop.MATSHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_TLG_OBJECT_ID, Indexes.IDX_TLG_TS, Indexes.TECH_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TechLogRecord, Long> getIdentity() {
        return Keys.IDENTITY_TECH_LOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TechLogRecord> getPrimaryKey() {
        return Keys.TECH_LOG_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TechLogRecord>> getKeys() {
        return Arrays.<UniqueKey<TechLogRecord>>asList(Keys.TECH_LOG_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TechLogTable as(String alias) {
        return new TechLogTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TechLogTable as(Name alias) {
        return new TechLogTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TechLogTable rename(String name) {
        return new TechLogTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TechLogTable rename(Name name) {
        return new TechLogTable(name, null);
    }
}
