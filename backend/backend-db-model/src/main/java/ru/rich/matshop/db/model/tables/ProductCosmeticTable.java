/*
 * This file is generated by jOOQ.
 */
package ru.rich.matshop.db.model.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.rich.matshop.db.model.Indexes;
import ru.rich.matshop.db.model.Keys;
import ru.rich.matshop.db.model.Matshop;
import ru.rich.matshop.db.model.tables.records.ProductCosmeticRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductCosmeticTable extends TableImpl<ProductCosmeticRecord> {

    private static final long serialVersionUID = 1941045941;

    /**
     * The reference instance of <code>matshop.product_cosmetic</code>
     */
    public static final ProductCosmeticTable PRODUCT_COSMETIC = new ProductCosmeticTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductCosmeticRecord> getRecordType() {
        return ProductCosmeticRecord.class;
    }

    /**
     * The column <code>matshop.product_cosmetic.product_id</code>.
     */
    public final TableField<ProductCosmeticRecord, Long> PRODUCT_ID = createField("product_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>matshop.product_cosmetic.name</code>.
     */
    public final TableField<ProductCosmeticRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(4000).nullable(false), this, "");

    /**
     * The column <code>matshop.product_cosmetic.price</code>.
     */
    public final TableField<ProductCosmeticRecord, Long> PRICE = createField("price", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>matshop.product_cosmetic.category</code>.
     */
    public final TableField<ProductCosmeticRecord, Long> CATEGORY = createField("category", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>matshop.product_cosmetic.popularity</code>.
     */
    public final TableField<ProductCosmeticRecord, Long> POPULARITY = createField("popularity", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>matshop.product_cosmetic</code> table reference
     */
    public ProductCosmeticTable() {
        this(DSL.name("product_cosmetic"), null);
    }

    /**
     * Create an aliased <code>matshop.product_cosmetic</code> table reference
     */
    public ProductCosmeticTable(String alias) {
        this(DSL.name(alias), PRODUCT_COSMETIC);
    }

    /**
     * Create an aliased <code>matshop.product_cosmetic</code> table reference
     */
    public ProductCosmeticTable(Name alias) {
        this(alias, PRODUCT_COSMETIC);
    }

    private ProductCosmeticTable(Name alias, Table<ProductCosmeticRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductCosmeticTable(Name alias, Table<ProductCosmeticRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProductCosmeticTable(Table<O> child, ForeignKey<O, ProductCosmeticRecord> key) {
        super(child, key, PRODUCT_COSMETIC);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Matshop.MATSHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IDX_PCS_CATEGORY, Indexes.IDX_PCS_NAME, Indexes.IDX_PCS_POPULARITY, Indexes.IDX_PCS_PRICE, Indexes.PRODUCT_COSMETIC_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductCosmeticRecord> getPrimaryKey() {
        return Keys.PRODUCT_COSMETIC_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductCosmeticRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductCosmeticRecord>>asList(Keys.PRODUCT_COSMETIC_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<ProductCosmeticRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductCosmeticRecord, ?>>asList(Keys.PRODUCT_COSMETIC__PRODUCT_COSMETIC_PRODUCT_ID_FKEY);
    }

    public ProductTable product() {
        return new ProductTable(this, Keys.PRODUCT_COSMETIC__PRODUCT_COSMETIC_PRODUCT_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductCosmeticTable as(String alias) {
        return new ProductCosmeticTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductCosmeticTable as(Name alias) {
        return new ProductCosmeticTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCosmeticTable rename(String name) {
        return new ProductCosmeticTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductCosmeticTable rename(Name name) {
        return new ProductCosmeticTable(name, null);
    }
}
