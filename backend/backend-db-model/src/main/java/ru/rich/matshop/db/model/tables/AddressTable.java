/*
 * This file is generated by jOOQ.
 */
package ru.rich.matshop.db.model.tables;


import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import ru.rich.matshop.db.converters.TimestampConverter;
import ru.rich.matshop.db.model.Indexes;
import ru.rich.matshop.db.model.Keys;
import ru.rich.matshop.db.model.Matshop;
import ru.rich.matshop.db.model.tables.records.AddressRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AddressTable extends TableImpl<AddressRecord> {

    private static final long serialVersionUID = 207766151;

    /**
     * The reference instance of <code>matshop.address</code>
     */
    public static final AddressTable ADDRESS = new AddressTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AddressRecord> getRecordType() {
        return AddressRecord.class;
    }

    /**
     * The column <code>matshop.address.id</code>.
     */
    public final TableField<AddressRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('address_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>matshop.address.person_id</code>.
     */
    public final TableField<AddressRecord, Long> PERSON_ID = createField("person_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>matshop.address.region</code>.
     */
    public final TableField<AddressRecord, String> REGION = createField("region", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>matshop.address.town</code>.
     */
    public final TableField<AddressRecord, String> TOWN = createField("town", org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>matshop.address.street</code>.
     */
    public final TableField<AddressRecord, String> STREET = createField("street", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>matshop.address.house</code>.
     */
    public final TableField<AddressRecord, String> HOUSE = createField("house", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * The column <code>matshop.address.housing</code>.
     */
    public final TableField<AddressRecord, String> HOUSING = createField("housing", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>matshop.address.construction</code>.
     */
    public final TableField<AddressRecord, String> CONSTRUCTION = createField("construction", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>matshop.address.apartment</code>.
     */
    public final TableField<AddressRecord, String> APARTMENT = createField("apartment", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>matshop.address.entrance</code>.
     */
    public final TableField<AddressRecord, String> ENTRANCE = createField("entrance", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>matshop.address.intercom</code>.
     */
    public final TableField<AddressRecord, String> INTERCOM = createField("intercom", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>matshop.address.address_comment</code>.
     */
    public final TableField<AddressRecord, String> ADDRESS_COMMENT = createField("address_comment", org.jooq.impl.SQLDataType.VARCHAR(1000), this, "");

    /**
     * The column <code>matshop.address.edit_date</code>.
     */
    public final TableField<AddressRecord, Date> EDIT_DATE = createField("edit_date", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new TimestampConverter());

    /**
     * Create a <code>matshop.address</code> table reference
     */
    public AddressTable() {
        this(DSL.name("address"), null);
    }

    /**
     * Create an aliased <code>matshop.address</code> table reference
     */
    public AddressTable(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>matshop.address</code> table reference
     */
    public AddressTable(Name alias) {
        this(alias, ADDRESS);
    }

    private AddressTable(Name alias, Table<AddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private AddressTable(Name alias, Table<AddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> AddressTable(Table<O> child, ForeignKey<O, AddressRecord> key) {
        super(child, key, ADDRESS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Matshop.MATSHOP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADDRESS_PKEY, Indexes.IDX_ADR_PERSON_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AddressRecord, Long> getIdentity() {
        return Keys.IDENTITY_ADDRESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AddressRecord> getPrimaryKey() {
        return Keys.ADDRESS_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AddressRecord>> getKeys() {
        return Arrays.<UniqueKey<AddressRecord>>asList(Keys.ADDRESS_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<AddressRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AddressRecord, ?>>asList(Keys.ADDRESS__ADDRESS_PERSON_ID_FKEY);
    }

    public PersonTable person() {
        return new PersonTable(this, Keys.ADDRESS__ADDRESS_PERSON_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressTable as(String alias) {
        return new AddressTable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AddressTable as(Name alias) {
        return new AddressTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AddressTable rename(String name) {
        return new AddressTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AddressTable rename(Name name) {
        return new AddressTable(name, null);
    }
}
